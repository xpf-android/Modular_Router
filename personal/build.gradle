if (isRelease) {
    apply plugin: 'com.android.library'//正式环境，集成化状态
} else {
    apply plugin: 'com.android.application'//测试环境，组件化状态
}

android {
    compileSdkVersion rootProject.ext.androidId.compileSdkVersion
    buildToolsVersion rootProject.ext.androidId.buildToolsVersion

    defaultConfig {
        if (!isRelease) {// 如果是集成化环境，不能有applicationId
            applicationId rootProject.ext.appId.personal//组件化模式能独立运行才能有applicationId
        }
        minSdkVersion rootProject.ext.androidId.minSdkVersion
        targetSdkVersion rootProject.ext.androidId.targetSdkVersion
        versionCode rootProject.ext.androidId.versionCode
        versionName rootProject.ext.androidId.versionName

        testInstrumentationRunner rootProject.ext.androidId.testInstrumentationRunner
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }


    // 配置资源路径，方便测试环境，打包不集成到正式环境
    sourceSets {
        main {
            if (!isRelease) {
                // 如果是组件化模式，需要单独运行时
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                // 集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    // 集成化时debug目录下文件不需要合并到工程
                    exclude '**/debug/**'
                }
            }
        }
    }

}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    /*implementation rootProject.ext.app_impl.publicImplementation
    testImplementation rootProject.ext.app_impl.testImplementation
    androidTestImplementation rootProject.ext.app_impl.androidTestImplementation*/

    //dependencies里面的依赖引入方式，好比Map的形式，有key, value，循环遍历引入依赖
    dependencies_impl.each {k, v -> implementation v}

//    implementation project(rootProject.ext.app_impl.other)


    rootProject.ext.app_impl.other2.each{
        implementation project(it)
    }


    annotationProcessor project(':compiler')
}